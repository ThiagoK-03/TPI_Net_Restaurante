@page "/dashboard/empleado/productos"
@layout EmpleadoDashboardLayout

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-danger fw-bold">Gestión de Productos</h2>
        <button class="btn btn-primary" @onclick="OpenAddProductModal">
            <i class="bi bi-plus-circle"></i> Agregar Producto
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-danger" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando productos...</p>
        </div>
    }
    else if (productos.Count == 0)
    {
        <div class="card text-center py-5">
            <div class="card-body">
                <h1 class="display-1">📦</h1>
                <h3 class="text-muted">No hay productos registrados</h3>
                <p class="text-secondary">Comienza agregando tu primer producto</p>
            </div>
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var producto in productos)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm border-0" style="border-left: 4px solid var(--rojo-principal) !important;">
                        <div class="card-body">
                            <div class="d-flex align-items-start mb-3">
                                <div class="fs-1 me-3" style="background-color: var(--rojo-muy-claro); padding: 15px; border-radius: 12px;">
                                    🍕
                                </div>
                                <div class="flex-grow-1">
                                    <h5 class="card-title text-danger fw-bold mb-1">@producto.Nombre</h5>
                                    <p class="card-text text-muted small mb-2">@producto.Descripcion</p>
                                    <div class="d-flex align-items-center gap-3">
                                        <span class="h4 mb-0 text-danger fw-bold">$@producto.Precio.ToString("F2")</span>
                                        <span class="badge @(producto.Stock > 0 ? "bg-success" : "bg-danger")">
                                            @(producto.Stock > 0 ? $"Stock: {producto.Stock}" : "Sin stock")
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex gap-2 mt-3">
                                <button class="btn btn-sm btn-outline-primary flex-fill" @onclick="() => OpenEditProductModal(producto)">
                                    <i class="bi bi-pencil"></i> Editar
                                </button>
                                <button class="btn btn-sm btn-outline-danger flex-fill" @onclick="() => ConfirmDelete(producto)">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @* Modal Agregar/Editar *@
    @if (showModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" @onclick="CloseModal">
            <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header" style="background-color: var(--rojo-muy-claro);">
                        <h5 class="modal-title text-danger fw-bold">
                            @(isEditMode ? "Editar Producto" : "Nuevo Producto")
                        </h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <form @onsubmit="SaveProduct">
                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Nombre del Producto</label>
                                <input type="text" class="form-control" @bind="currentProduct.Nombre" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Descripción</label>
                                <textarea class="form-control" rows="3" @bind="currentProduct.Descripcion" required></textarea>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label fw-semibold">Precio</label>
                                    <input type="number" step="0.01" class="form-control" @bind="currentProduct.Precio" required />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label fw-semibold">Stock</label>
                                    <input type="number" class="form-control" @bind="currentProduct.Stock" required />
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                            <button type="submit" class="btn btn-primary">
                                @(isEditMode ? "Guardar Cambios" : "Crear Producto")
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    }

    @* Modal Confirmación Eliminar *@
    @if (showDeleteModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" @onclick="CloseDeleteModal">
            <div class="modal-dialog modal-dialog-centered modal-sm" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title fw-bold">Confirmar Eliminación</h5>
                        <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteModal"></button>
                    </div>
                    <div class="modal-body">
                        <p>¿Estás seguro de que deseas eliminar el producto <strong>@productToDelete?.Nombre</strong>?</p>
                        <p class="text-danger small mb-0"><i class="bi bi-exclamation-triangle"></i> Esta acción no se puede deshacer.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancelar</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteProduct">Eliminar</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Producto> productos = new();
    private bool isLoading = false;
    private bool showModal = false;
    private bool showDeleteModal = false;
    private bool isEditMode = false;
    private Producto currentProduct = new();
    private Producto? productToDelete = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductos();
    }

    private async Task LoadProductos()
    {
        isLoading = true;
        await Task.Delay(500);

        productos = new List<Producto>
        {
            new Producto { Id = 1, Nombre = "Pizza Margarita", Descripcion = "Pizza clásica con tomate y mozzarella", Precio = 850.00m, Stock = 25 },
            new Producto { Id = 2, Nombre = "Hamburguesa Completa", Descripcion = "Hamburguesa con lechuga, tomate y queso", Precio = 650.00m, Stock = 30 },
            new Producto { Id = 3, Nombre = "Empanadas x12", Descripcion = "Docena de empanadas de carne", Precio = 1200.00m, Stock = 0 },
            new Producto { Id = 4, Nombre = "Milanesa Napolitana", Descripcion = "Milanesa con salsa y queso gratinado", Precio = 950.00m, Stock = 15 }
        };

        isLoading = false;
    }

    private void OpenAddProductModal()
    {
        isEditMode = false;
        currentProduct = new Producto();
        showModal = true;
    }

    private void OpenEditProductModal(Producto producto)
    {
        isEditMode = true;
        currentProduct = new Producto
            {
                Id = producto.Id,
                Nombre = producto.Nombre,
                Descripcion = producto.Descripcion,
                Precio = producto.Precio,
                Stock = producto.Stock
            };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentProduct = new();
    }

    private async Task SaveProduct()
    {
        if (isEditMode)
        {
            var index = productos.FindIndex(p => p.Id == currentProduct.Id);
            if (index >= 0)
                productos[index] = currentProduct;
        }
        else
        {
            currentProduct.Id = productos.Any() ? productos.Max(p => p.Id) + 1 : 1;
            productos.Add(currentProduct);
        }

        CloseModal();
        StateHasChanged();
    }

    private void ConfirmDelete(Producto producto)
    {
        productToDelete = producto;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        productToDelete = null;
    }

    private async Task DeleteProduct()
    {
        if (productToDelete != null)
        {
            productos.Remove(productToDelete);
            CloseDeleteModal();
            StateHasChanged();
        }
    }

    private class Producto
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string Descripcion { get; set; } = string.Empty;
        public decimal Precio { get; set; }
        public int Stock { get; set; }
    }
}