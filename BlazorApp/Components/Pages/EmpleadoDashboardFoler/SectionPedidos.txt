@page "/dashboard/empleado/pedidos"
@layout EmpleadoDashboardLayout
@using DTOs
@using API

<div class="container-fluid py-4">
    <h2 class="text-danger fw-bold mb-4">Gestión de Pedidos</h2>

    <div class="btn-group mb-4 d-flex flex-wrap" role="group">
        <button type="button"
                class="btn @(estadoFiltro == null ? "btn-danger" : "btn-outline-danger")"
                @onclick="MostrarTodos">
            Todos (@pedidos.Count)
        </button>
        @foreach (var estado in Enum.GetValues<EstadoPedido>())
        {
            <button type="button"
                    class="btn @(estadoFiltro == estado ? "btn-danger" : "btn-outline-danger")"
                    @onclick="@(() => FiltrarPorEstado(estado))">
                @ObtenerTextoEstado(estado) (@pedidos.Count(p => p.Estado == estado.ToString()))
            </button>
        }
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-danger" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando pedidos...</p>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            Error al cargar pedidos: @errorMessage
            <button class="btn btn-sm btn-outline-danger ms-3" @onclick="CargarPedidos">
                <i class="bi bi-arrow-clockwise"></i> Reintentar
            </button>
        </div>
    }
    else if (pedidosFiltrados.Count == 0)
    {
        <div class="card text-center py-5">
            <div class="card-body">
                <h1 class="display-1">📦</h1>
                <h3 class="text-muted">No hay pedidos @(estadoFiltro != null ? "en este estado" : "")</h3>
                <p class="text-secondary">Los pedidos aparecerán aquí automáticamente</p>
            </div>
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var pedido in pedidosFiltrados)
            {
                <div class="col-12 col-lg-6">
                    <div class="card h-100 shadow-sm border-0" style="border-left: 5px solid @ObtenerColorEstado(pedido.Estado) !important;">
                        <div class="card-header d-flex justify-content-between align-items-center" style="background-color: var(--rojo-muy-claro);">
                            <div class="d-flex align-items-center gap-2">
                                <span class="fs-3">📋</span>
                                <div>
                                    <h5 class="mb-0 text-danger fw-bold">Pedido #@pedido.Id</h5>
                                    <small class="text-muted">@pedido.FechaHoraInicio.ToString("dd/MM/yyyy HH:mm")</small>
                                </div>
                            </div>
                            <span class="badge @ObtenerClaseEstado(pedido.Estado) fs-6">
                                @ObtenerTextoEstado(Enum.Parse<EstadoPedido>(pedido.Estado))
                            </span>
                        </div>

                        <div class="card-body">
                            <div class="mb-2">
                                <small class="text-muted">👤 Cliente ID:</small>
                                <span class="ms-2 fw-semibold">@pedido.ClienteId</span>
                            </div>

                            @if (pedido.EmpleadoId != null)
                            {
                                <div class="mb-3">
                                    <div class="alert alert-success py-2">
                                        <small>
                                            <i class="bi bi-person-check-fill"></i>
                                            <strong>Asignado a Empleado ID:</strong> @pedido.EmpleadoId
                                            @if (pedido.EmpleadoId == empleadoIdActual)
                                            {
                                                <span class="badge bg-primary ms-2">Tú</span>
                                            }
                                        </small>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="mb-3">
                                    <div class="alert alert-warning py-2">
                                        <small><i class="bi bi-exclamation-triangle"></i> Sin empleado asignado</small>
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(pedido.Descripcion))
                            {
                                <div class="alert alert-light border mb-3">
                                    <small class="text-muted d-block mb-1">💬 Observaciones:</small>
                                    <small>@pedido.Descripcion</small>
                                </div>
                            }

                            @if (pedido.Productos != null && pedido.Productos.Any())
                            {
                                <div class="mb-3">
                                    <small class="text-muted d-block mb-2 fw-semibold">📝 Items del pedido:</small>
                                    <ul class="list-unstyled ms-2">
                                        @foreach (var prod in pedido.Productos)
                                        {
                                            <li class="mb-1">
                                                <span class="badge bg-secondary">ID: @prod.Id</span>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>

                        <div class="card-footer bg-light">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <span class="text-muted">Total:</span>
                                <strong class="h4 mb-0 text-danger">$@pedido.Subtotal.ToString("F2")</strong>
                            </div>

                            <div class="d-flex gap-2 flex-wrap">
                                @if (pedido.EmpleadoId == null && pedido.Estado == "Pendiente")
                                {
                                    <button class="btn btn-primary flex-fill" @onclick="@(() => AsignarmeAlPedido(pedido))">
                                        <i class="bi bi-person-plus"></i> Asignarme Este Pedido
                                    </button>
                                }
                                else if (pedido.EmpleadoId == empleadoIdActual && pedido.Estado == "Pendiente")
                                {
                                    <button class="btn btn-success flex-fill" @onclick="@(() => IniciarPreparacion(pedido))">
                                        <i class="bi bi-play-fill"></i> Iniciar Preparación
                                    </button>
                                }
                                else if (pedido.EmpleadoId == empleadoIdActual && pedido.Estado == "EnPreparacion")
                                {
                                    <button class="btn btn-success flex-fill" @onclick="@(() => CompletarPedido(pedido))">
                                        <i class="bi bi-check-circle"></i> Marcar Completado
                                    </button>
                                }
                                <button class="btn btn-outline-primary flex-fill" @onclick="@(() => VerDetalles(pedido))">
                                    <i class="bi bi-eye"></i> Ver Detalles
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @* Modal Ver Detalles *@
    @if (showDetailsModal && pedidoSeleccionado != null)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" @onclick="CerrarDetalles">
            <div class="modal-dialog modal-dialog-centered modal-lg" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header" style="background-color: var(--rojo-muy-claro);">
                        <h5 class="modal-title text-danger fw-bold">Detalles del Pedido #@pedidoSeleccionado.Id</h5>
                        <button type="button" class="btn-close" @onclick="CerrarDetalles"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-4">
                            <h6 class="text-danger fw-bold mb-3">Información del Pedido</h6>
                            <p class="mb-2"><strong>Estado:</strong> <span class="badge @ObtenerClaseEstado(pedidoSeleccionado.Estado)">@ObtenerTextoEstado(Enum.Parse<EstadoPedido>(pedidoSeleccionado.Estado))</span></p>
                            <p class="mb-2"><strong>Cliente ID:</strong> @pedidoSeleccionado.ClienteId</p>
                            @if (pedidoSeleccionado.EmpleadoId != null)
                            {
                                <p class="mb-2"><strong>Empleado ID:</strong> @pedidoSeleccionado.EmpleadoId</p>
                            }
                            <p class="mb-2"><strong>Fecha Inicio:</strong> @pedidoSeleccionado.FechaHoraInicio.ToString("dd/MM/yyyy HH:mm")</p>
                            @if (pedidoSeleccionado.FechaHoraFinEstimada != null)
                            {
                                <p class="mb-2"><strong>Fin Estimado:</strong> @pedidoSeleccionado.FechaHoraFinEstimada?.ToString("dd/MM/yyyy HH:mm")</p>
                            }
                            @if (pedidoSeleccionado.FechaHoraFin != null)
                            {
                                <p class="mb-2"><strong>Completado:</strong> @pedidoSeleccionado.FechaHoraFin?.ToString("dd/MM/yyyy HH:mm")</p>
                            }
                        </div>

                        @if (!string.IsNullOrEmpty(pedidoSeleccionado.Descripcion))
                        {
                            <div class="mb-4">
                                <h6 class="text-danger fw-bold mb-3">Observaciones del Cliente</h6>
                                <div class="alert alert-light border">
                                    <p class="mb-0">@pedidoSeleccionado.Descripcion</p>
                                </div>
                            </div>
                        }

                        @if (pedidoSeleccionado.Productos != null && pedidoSeleccionado.Productos.Any())
                        {
                            <div class="mb-4">
                                <h6 class="text-danger fw-bold mb-3">Productos</h6>
                                <div class="list-group">
                                    @foreach (var prod in pedidoSeleccionado.Productos)
                                    {
                                        <div class="list-group-item">
                                            <span>Producto ID: @prod.Id</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <div class="text-end pt-3 border-top">
                            <h4 class="text-danger mb-0">Total: $@pedidoSeleccionado.Subtotal.ToString("F2")</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @* Toast *@
    @if (mostrarToast)
    {
        <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
            <div class="toast show" role="alert">
                <div class="toast-header @(toastExito ? "bg-success" : "bg-danger") text-white">
                    <i class="bi @(toastExito ? "bi-check-circle-fill" : "bi-x-circle-fill") me-2"></i>
                    <strong class="me-auto">@(toastExito ? "¡Éxito!" : "Error")</strong>
                    <button type="button" class="btn-close btn-close-white" @onclick="@(() => mostrarToast = false)"></button>
                </div>
                <div class="toast-body">@mensajeToast</div>
            </div>
        </div>
    }
</div>

@code {
    private List<PedidoDTO> pedidos = new();
    private List<PedidoDTO> pedidosFiltrados = new();
    private bool isLoading = false;
    private bool showDetailsModal = false;
    private PedidoDTO? pedidoSeleccionado = null;
    private bool mostrarToast = false;
    private string mensajeToast = string.Empty;
    private bool toastExito = true;
    private string? errorMessage = null;
    private EstadoPedido? estadoFiltro = null;
    private int empleadoIdActual = 1; // TODO: Obtener del empleado logueado

    public enum EstadoPedido
    {
        Pendiente,
        EnPreparacion,
        Completado,
        Cancelado
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarPedidos();
    }

    private async Task CargarPedidos()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            pedidos = (await PedidoApi.GetAllAsync()).ToList();
            pedidosFiltrados = pedidos;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            pedidos = new List<PedidoDTO>();
            pedidosFiltrados = new List<PedidoDTO>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FiltrarPorEstado(EstadoPedido estado)
    {
        estadoFiltro = estado;
        pedidosFiltrados = pedidos.Where(p => p.Estado == estado.ToString()).ToList();
    }

    private void MostrarTodos()
    {
        estadoFiltro = null;
        pedidosFiltrados = pedidos;
    }

    private void VerDetalles(PedidoDTO pedido)
    {
        pedidoSeleccionado = pedido;
        showDetailsModal = true;
    }

    private void CerrarDetalles()
    {
        showDetailsModal = false;
        pedidoSeleccionado = null;
    }

    private async Task AsignarmeAlPedido(PedidoDTO pedido)
    {
        try
        {
            pedido.EmpleadoId = empleadoIdActual;
            await PedidoApi.UpdateAsync(pedido);
            MostrarToast("Te has asignado al pedido exitosamente", true);
            await CargarPedidos();
        }
        catch (Exception ex)
        {
            MostrarToast($"Error al asignarte: {ex.Message}", false);
        }
    }

    private async Task IniciarPreparacion(PedidoDTO pedido)
    {
        try
        {
            pedido.Estado = EstadoPedido.EnPreparacion.ToString();
            await PedidoApi.UpdateAsync(pedido);
            MostrarToast("Pedido en preparación", true);
            await CargarPedidos();
        }
        catch (Exception ex)
        {
            MostrarToast($"Error al iniciar: {ex.Message}", false);
        }
    }

    private async Task CompletarPedido(PedidoDTO pedido)
    {
        try
        {
            pedido.Estado = EstadoPedido.Completado.ToString();
            pedido.FechaHoraFin = DateTime.Now;
            await PedidoApi.UpdateAsync(pedido);
            MostrarToast("¡Pedido completado!", true);
            await CargarPedidos();
        }
        catch (Exception ex)
        {
            MostrarToast($"Error al completar: {ex.Message}", false);
        }
    }

    private void MostrarToast(string mensaje, bool exito)
    {
        mensajeToast = mensaje;
        toastExito = exito;
        mostrarToast = true;
        StateHasChanged();

        Task.Delay(3000).ContinueWith(_ =>
        {
            mostrarToast = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private string ObtenerTextoEstado(EstadoPedido estado)
    {
        return estado switch
        {
            EstadoPedido.Pendiente => "Pendiente",
            EstadoPedido.EnPreparacion => "En Preparación",
            EstadoPedido.Completado => "Completado",
            EstadoPedido.Cancelado => "Cancelado",
            _ => "Desconocido"
        };
    }

    private string ObtenerClaseEstado(string estado)
    {
        return estado switch
        {
            "Pendiente" => "bg-warning text-dark",
            "EnPreparacion" => "bg-primary",
            "Completado" => "bg-success",
            "Cancelado" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string ObtenerColorEstado(string estado)
    {
        return estado switch
        {
            "Pendiente" => "#ff9800",
            "EnPreparacion" => "#2196f3",
            "Completado" => "#4caf50",
            "Cancelado" => "#f44336",
            _ => "#9e9e9e"
        };
    }
}