@page "/dashboard/empleado/ingredientes"
@layout EmpleadoDashboardLayout

@using DTOs
@using API

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap gap-3">
        <h2 class="text-danger fw-bold mb-0">Inventario de Ingredientes</h2>
        <div class="input-group" style="max-width: 350px;">
            <span class="input-group-text bg-white"><i class="bi bi-search"></i></span>
            <input type="text"
                   class="form-control"
                   placeholder="Buscar ingrediente..."
                   @bind="searchTerm"
                   @bind:event="oninput"
                   @onkeyup="FilterIngredientes" />
        </div>
    </div>

    <div class="alert alert-info d-flex align-items-center mb-4" role="alert">
        <i class="bi bi-info-circle-fill me-2 fs-5"></i>
        <div>Vista de solo lectura. Para modificar ingredientes contacta al administrador.</div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-danger" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando ingredientes...</p>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            Error al cargar ingredientes: @errorMessage
            <button class="btn btn-sm btn-outline-danger ms-3" @onclick="CargarIngredientes">
                <i class="bi bi-arrow-clockwise"></i> Reintentar
            </button>
        </div>
    }
    else if (ingredientesFiltrados.Count == 0)
    {
        <div class="card text-center py-5">
            <div class="card-body">
                <h1 class="display-1">🥬</h1>
                <h3 class="text-muted">No se encontraron ingredientes</h3>
                <p class="text-secondary">@(string.IsNullOrEmpty(searchTerm) ? "No hay ingredientes registrados" : "Intenta con otra búsqueda")</p>
            </div>
        </div>
    }
    else
    {
        <div class="card shadow-sm border-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead style="background: linear-gradient(135deg, var(--rojo-principal) 0%, var(--rojo-oscuro) 100%);" class="text-white">
                        <tr>
                            <th class="py-3">#</th>
                            <th class="py-3">Ingrediente</th>
                            <th class="py-3 text-end">Cantidad Disponible</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var ingrediente in ingredientesFiltrados)
                        {
                            <tr class="@ObtenerClaseFilaTabla(ingrediente)">
                                <td>@ingrediente.Id</td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <span class="fs-4 me-3">🥬</span>
                                        <strong>@ingrediente.Nombre</strong>
                                    </div>
                                </td>
                                <td class="text-end">
                                    <span class="fw-bold fs-5 text-danger">@ingrediente.Stock</span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="card-footer bg-white text-center text-muted py-3">
                Mostrando @ingredientesFiltrados.Count de @ingredientes.Count ingredientes
            </div>
        </div>
    }
</div>

@code {
    private List<IngredienteDTO> ingredientes = new();
    private List<IngredienteDTO> ingredientesFiltrados = new();
    private bool isLoading = false;
    private string searchTerm = string.Empty;
    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        await CargarIngredientes();
    }

    private async Task CargarIngredientes()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            ingredientes = (await IngredienteApi.GetAllAsync()).ToList();
            ingredientesFiltrados = ingredientes;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            ingredientes = new List<IngredienteDTO>();
            ingredientesFiltrados = new List<IngredienteDTO>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterIngredientes()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            ingredientesFiltrados = ingredientes;
        }
        else
        {
            var search = searchTerm.ToLower();
            ingredientesFiltrados = ingredientes
                .Where(i => i.Nombre.ToLower().Contains(search))
                .ToList();
        }
    }

    private string ObtenerClaseFilaTabla(IngredienteDTO ingrediente)
    {
        if (ingrediente.Stock == 0) return "table-danger";
        if (ingrediente.Stock < 10) return "table-warning";
        return "";
    }
}