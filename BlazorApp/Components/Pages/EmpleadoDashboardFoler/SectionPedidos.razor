@page "/dashboard/empleado/pedidos"
@layout EmpleadoDashboardLayout

<div class="container-fluid py-4">
    <h2 class="text-danger fw-bold mb-4">Gestión de Pedidos</h2>

    <!-- Filtros -->
    <div class="btn-group mb-4 d-flex flex-wrap" role="group">
        <button type="button" class="btn @(filterStatus == Estado.NoRealizado ? "btn-danger" : "btn-outline-danger")"
                @onclick='() => FilterByStatus(Estado.NoRealizado)'>
            Todos (@pedidos.Count)
        </button>
        <button type="button" class="btn @(filterStatus == Estado.Pendiente ? "btn-danger" : "btn-outline-danger")"
                @onclick='() => FilterByStatus(Estado.Pendiente)'>
            Pendientes (@pedidos.Count(p => p.Estado == Estado.Pendiente))
        </button>
        <button type="button" class="btn @(filterStatus == Estado.EnPreparacion ? "btn-danger" : "btn-outline-danger")"
                @onclick='() => FilterByStatus(Estado.EnPreparacion)'>
            En Preparación (@pedidos.Count(p => p.Estado == Estado.EnPreparacion))
        </button>
        <button type="button" class="btn @(filterStatus == Estado.Completado ? "btn-danger" : "btn-outline-danger")"
                @onclick='() => FilterByStatus(Estado.Completado)'>
            Completados (@pedidos.Count(p => p.Estado == Estado.Completado))
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-danger" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando pedidos...</p>
        </div>
    }
    else if (filteredPedidos.Count == 0)
    {
        <div class="card text-center py-5">
            <div class="card-body">
                <h1 class="display-1">📦</h1>
                <h3 class="text-muted">No hay pedidos @(filterStatus != Estado.NoRealizado ? "en este estado" : "")</h3>
                <p class="text-secondary">Los pedidos aparecerán aquí automáticamente</p>
            </div>
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var pedido in filteredPedidos)
            {
                <div class="col-12 col-lg-6">
                    <div class="card h-100 shadow-sm border-0" style="border-left: 5px solid @GetBorderColor(pedido.Estado) !important;">
                        <div class="card-header d-flex justify-content-between align-items-center" style="background-color: var(--rojo-muy-claro);">
                            <div class="d-flex align-items-center gap-2">
                                <span class="fs-3">📋</span>
                                <div>
                                    <h5 class="mb-0 text-danger fw-bold">Pedido #@pedido.Id</h5>
                                    <small class="text-muted">@pedido.Fecha.ToString("dd/MM/yyyy HH:mm")</small>
                                </div>
                            </div>
                            <span class="badge @GetStatusBadgeClass(pedido.Estado) fs-6">
                                @pedido.Estado
                            </span>
                        </div>

                        <div class="card-body">
                            <div class="mb-3">
                                <strong class="text-muted">👤 Cliente:</strong>
                                <span class="ms-2">@pedido.Cliente</span>
                            </div>

                            <div class="mb-3">
                                <strong class="text-muted d-block mb-2">📝 Items:</strong>
                                <ul class="list-unstyled ms-3">
                                    @foreach (var item in pedido.Items)
                                    {
                                        <li class="mb-1">
                                            <span class="badge bg-secondary">@item.Cantidad</span>
                                            <span class="ms-2">@item.Producto</span>
                                            <span class="text-muted ms-2">- $@item.Precio.ToString("F2")</span>
                                        </li>
                                    }
                                </ul>
                            </div>

                            @if (!string.IsNullOrEmpty(pedido.Observaciones))
                            {
                                <div class="alert alert-light border mb-3">
                                    <strong class="text-muted">💬 Observaciones:</strong>
                                    <p class="mb-0 mt-1 fst-italic">@pedido.Observaciones</p>
                                </div>
                            }
                        </div>

                        <div class="card-footer bg-light">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <span class="text-muted">Total:</span>
                                <strong class="h4 mb-0 text-danger">$@pedido.Total.ToString("F2")</strong>
                            </div>

                            <div class="d-flex gap-2 flex-wrap">
                                @if (pedido.Estado == Estado.Pendiente)
                                {
                                    <button class="btn btn-primary flex-fill" @onclick="() => CambiarEstado(pedido, Estado.EnPreparacion)">
                                        <i class="bi bi-play-fill"></i> Iniciar Preparación
                                    </button>
                                }
                                else if (pedido.Estado == Estado.EnPreparacion)
                                {
                                    <button class="btn btn-success flex-fill" @onclick="() => CambiarEstado(pedido, Estado.Completado)">
                                        <i class="bi bi-check-circle"></i> Marcar Completado
                                    </button>
                                }
                                <button class="btn btn-outline-secondary flex-fill" @onclick="() => VerDetalles(pedido)">
                                    <i class="bi bi-eye"></i> Ver Detalles
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Modal de Detalles -->
    @if (showDetailsModal && selectedPedido != null)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" @onclick="CloseDetailsModal">
            <div class="modal-dialog modal-dialog-centered modal-lg" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header" style="background-color: var(--rojo-muy-claro);">
                        <h5 class="modal-title text-danger fw-bold">Detalles del Pedido #@selectedPedido.Id</h5>
                        <button type="button" class="btn-close" @onclick="CloseDetailsModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-4">
                            <h6 class="text-danger fw-bold mb-3">Información del Cliente</h6>
                            <p class="mb-2"><strong>Nombre:</strong> @selectedPedido.Cliente</p>
                            <p class="mb-2"><strong>Fecha:</strong> @selectedPedido.Fecha.ToString("dd/MM/yyyy HH:mm")</p>
                            <p class="mb-0">
                                <strong>Estado:</strong>
                                <span class="badge @GetStatusBadgeClass(selectedPedido.Estado) ms-2">
                                    @selectedPedido.Estado
                                </span>
                            </p>
                        </div>

                        <div class="mb-4">
                            <h6 class="text-danger fw-bold mb-3">Productos Pedidos</h6>
                            <div class="table-responsive">
                                <table class="table table-bordered table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Producto</th>
                                            <th class="text-center">Cantidad</th>
                                            <th class="text-end">Precio Unit.</th>
                                            <th class="text-end">Subtotal</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in selectedPedido.Items)
                                        {
                                            <tr>
                                                <td>@item.Producto</td>
                                                <td class="text-center">@item.Cantidad</td>
                                                <td class="text-end">$@item.Precio.ToString("F2")</td>
                                                <td class="text-end fw-bold">$@((item.Cantidad * item.Precio).ToString("F2"))</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(selectedPedido.Observaciones))
                        {
                            <div class="mb-4">
                                <h6 class="text-danger fw-bold mb-3">Observaciones</h6>
                                <div class="alert alert-light border">
                                    <p class="mb-0 fst-italic">@selectedPedido.Observaciones</p>
                                </div>
                            </div>
                        }

                        <div class="text-end pt-3 border-top">
                            <h4 class="text-danger mb-0">Total: $@selectedPedido.Total.ToString("F2")</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private enum Estado
    {
        Pendiente,
        EnPreparacion,
        Completado,
        NoRealizado
    }

    private List<Pedido> pedidos = new();
    private List<Pedido> filteredPedidos = new();
    private bool isLoading = false;
    private Estado filterStatus = Estado.NoRealizado;
    private bool showDetailsModal = false;
    private Pedido? selectedPedido = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadPedidos();
    }

    private async Task LoadPedidos()
    {
        isLoading = true;
        await Task.Delay(500);

        pedidos = new List<Pedido>
        {
            new Pedido
            {
                Id = 1001,
                Cliente = "Juan Pérez",
                Fecha = DateTime.Now.AddMinutes(-15),
                Estado = Estado.Pendiente,
                Total = 1850.00m,
                Observaciones = "Sin cebolla por favor",
                Items = new List<PedidoItem>
                {
                    new PedidoItem { Producto = "Pizza Margarita", Cantidad = 2, Precio = 850.00m },
                    new PedidoItem { Producto = "Coca Cola 1.5L", Cantidad = 1, Precio = 150.00m }
                }
            },
            new Pedido
            {
                Id = 1002,
                Cliente = "María González",
                Fecha = DateTime.Now.AddMinutes(-30),
                Estado = Estado.EnPreparacion,
                Total = 2100.00m,
                Items = new List<PedidoItem>
                {
                    new PedidoItem { Producto = "Hamburguesa Completa", Cantidad = 2, Precio = 650.00m },
                    new PedidoItem { Producto = "Papas Fritas", Cantidad = 2, Precio = 400.00m }
                }
            },
            new Pedido
            {
                Id = 1003,
                Cliente = "Carlos Rodríguez",
                Fecha = DateTime.Now.AddHours(-1),
                Estado = Estado.Completado,
                Total = 950.00m,
                Items = new List<PedidoItem>
                {
                    new PedidoItem { Producto = "Milanesa Napolitana", Cantidad = 1, Precio = 950.00m }
                }
            },
            new Pedido
            {
                Id = 1004,
                Cliente = "Ana López",
                Fecha = DateTime.Now.AddMinutes(-5),
                Estado = Estado.Pendiente,
                Total = 1200.00m,
                Observaciones = "Agregar extra de queso",
                Items = new List<PedidoItem>
                {
                    new PedidoItem { Producto = "Empanadas x12", Cantidad = 1, Precio = 1200.00m }
                }
            }
        };

        FilterByStatus(filterStatus);
        isLoading = false;
    }

    private void FilterByStatus(Estado estado)
    {
        filterStatus = estado;

        if (estado == Estado.NoRealizado)
            filteredPedidos = pedidos;
        else
            filteredPedidos = pedidos.Where(p => p.Estado == estado).ToList();
    }

    private async Task CambiarEstado(Pedido pedido, Estado nuevoEstado)
    {
        pedido.Estado = nuevoEstado;
        FilterByStatus(filterStatus);
        StateHasChanged();
    }

    private void VerDetalles(Pedido pedido)
    {
        selectedPedido = pedido;
        showDetailsModal = true;
    }

    private void CloseDetailsModal()
    {
        showDetailsModal = false;
        selectedPedido = null;
    }

    private string GetBorderColor(Estado estado) => estado switch
    {
        Estado.Pendiente => "#ff9800",
        Estado.EnPreparacion => "#2196f3",
        Estado.Completado => "#4caf50",
        _ => "var(--gris-medio)"
    };

    private string GetStatusBadgeClass(Estado estado) => estado switch
    {
        Estado.Pendiente => "bg-warning text-dark",
        Estado.EnPreparacion => "bg-primary",
        Estado.Completado => "bg-success",
        _ => "bg-secondary"
    };

    private class Pedido
    {
        public int Id { get; set; }
        public string Cliente { get; set; } = string.Empty;
        public DateTime Fecha { get; set; }
        public Estado Estado { get; set; }
        public decimal Total { get; set; }
        public string Observaciones { get; set; } = string.Empty;
        public List<PedidoItem> Items { get; set; } = new();
    }

    private class PedidoItem
    {
        public string Producto { get; set; } = string.Empty;
        public int Cantidad { get; set; }
        public decimal Precio { get; set; }
    }
}
