@page "/dashboard/cliente/productos"
@layout ClienteDashboardLayout

@using DTOs
@using API

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap gap-3">
        <h2 class="text-danger fw-bold mb-0">Nuestro Menú</h2>
        <div class="input-group" style="max-width: 350px;">
            <span class="input-group-text bg-white"><i class="bi bi-search"></i></span>
            <input type="text"
                   class="form-control"
                   placeholder="Buscar producto..."
                   @bind="searchTerm"
                   @bind:event="oninput"
                   @onkeyup="FiltrarProductos" />
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-danger" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando productos...</p>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            Error al cargar productos: @errorMessage
            <button class="btn btn-sm btn-outline-danger ms-3" @onclick="CargarProductos">
                <i class="bi bi-arrow-clockwise"></i> Reintentar
            </button>
        </div>
    }
    else if (productosFiltrados.Count == 0)
    {
        <div class="card text-center py-5">
            <div class="card-body">
                <h1 class="display-1">🍽️</h1>
                <h3 class="text-muted">No se encontraron productos</h3>
                <p class="text-secondary">@(string.IsNullOrEmpty(searchTerm) ? "No hay productos disponibles" : "Intenta con otra búsqueda")</p>
            </div>
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4">
            @foreach (var producto in productosFiltrados)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm border-0 producto-card"
                         style="border-top: 4px solid var(--rojo-principal) !important;">
                        <div class="position-relative">
                            <div class="text-center py-5" style="background: linear-gradient(135deg, var(--rojo-muy-claro) 0%, var(--rojo-claro) 100%);">
                                <span class="display-3">🍕</span>
                            </div>
                        </div>

                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-danger fw-bold mb-2">@producto.Nombre</h5>
                            <p class="card-text text-muted small flex-grow-1">@producto.Descripcion</p>

                            <div class="mt-3">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <span class="h4 mb-0 text-danger fw-bold">$@producto.Precio.ToString("F2")</span>
                                </div>

                                <button class="btn btn-primary w-100" @onclick="@(() => AgregarAlCarrito(producto))">
                                    <i class="bi bi-cart-plus"></i> Agregar al Pedido
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @* Carrito Flotante *@
    @if (productosEnCarrito.Count > 0)
    {
        <div class="position-fixed bottom-0 end-0 m-4" style="z-index: 1000;">
            <button class="btn btn-danger btn-lg rounded-circle position-relative shadow-lg carrito-btn"
                    @onclick="AbrirCarrito"
                    style="width: 70px; height: 70px;">
                <i class="bi bi-cart3 fs-4"></i>
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-warning text-dark">
                    @productosEnCarrito.Count
                </span>
            </button>
        </div>
    }

    @* Modal Carrito *@
    @if (showCarrito)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" @onclick="CerrarCarrito">
            <div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header" style="background-color: var(--rojo-muy-claro);">
                        <h5 class="modal-title text-danger fw-bold">
                            <i class="bi bi-cart3"></i> Mi Pedido
                        </h5>
                        <button type="button" class="btn-close" @onclick="CerrarCarrito"></button>
                    </div>
                    <div class="modal-body">
                        @if (productosEnCarrito.Count == 0)
                        {
                            <div class="text-center py-5">
                                <h1 class="display-1">🛒</h1>
                                <h3 class="text-muted">Tu carrito está vacío</h3>
                                <p class="text-secondary">Agrega productos para hacer tu pedido</p>
                            </div>
                        }
                        else
                        {
                            <div class="list-group mb-3">
                                @foreach (var item in productosEnCarrito)
                                {
                                    <div class="list-group-item">
                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                            <div class="flex-grow-1">
                                                <h6 class="mb-1 fw-bold text-danger">@item.Producto.Nombre</h6>
                                                <small class="text-muted">$@item.Producto.Precio.ToString("F2") c/u</small>
                                            </div>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="@(() => EliminarDelCarrito(item))">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                        <div class="d-flex align-items-center gap-3">
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-outline-danger" @onclick="@(() => DisminuirCantidad(item))">
                                                    <i class="bi bi-dash"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" disabled>
                                                    @item.Cantidad
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="@(() => AumentarCantidad(item))">
                                                    <i class="bi bi-plus"></i>
                                                </button>
                                            </div>
                                            <span class="fw-bold text-danger ms-auto">
                                                $@((item.Cantidad * item.Producto.Precio).ToString("F2"))
                                            </span>
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="mb-3">
                                <label class="form-label fw-semibold">Observaciones / Instrucciones Especiales</label>
                                <textarea class="form-control" rows="3" @bind="observaciones"
                                          placeholder="Ej: Sin cebolla, bien cocido, punto medio, etc."></textarea>
                                <small class="text-muted">Opcional: Añade cualquier nota especial para tu pedido</small>
                            </div>

                            <div class="alert alert-light border">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="text-muted">Subtotal:</span>
                                    <span class="fw-bold">$@CalcularSubtotal().ToString("F2")</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">Total:</h5>
                                    <h4 class="mb-0 text-danger fw-bold">
                                        $@CalcularSubtotal().ToString("F2")
                                    </h4>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        @if (productosEnCarrito.Count > 0)
                        {
                            <button type="button" class="btn btn-outline-secondary" @onclick="VaciarCarrito">
                                <i class="bi bi-trash"></i> Vaciar Carrito
                            </button>
                            <button type="button" class="btn btn-primary btn-lg" @onclick="ConfirmarPedido" disabled="@isConfirmando">
                                @if (isConfirmando)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="bi bi-check-circle"></i> Confirmar Pedido
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-secondary" @onclick="CerrarCarrito">Cerrar</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @* Toast *@
    @if (mostrarToast)
    {
        <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
            <div class="toast show" role="alert">
                <div class="toast-header @(toastExito ? "bg-success" : "bg-danger") text-white">
                    <i class="bi @(toastExito ? "bi-check-circle-fill" : "bi-x-circle-fill") me-2"></i>
                    <strong class="me-auto">@(toastExito ? "¡Éxito!" : "Error")</strong>
                    <button type="button" class="btn-close btn-close-white" @onclick="@(() => mostrarToast = false)"></button>
                </div>
                <div class="toast-body">@mensajeToast</div>
            </div>
        </div>
    }
</div>

<style>
    .producto-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .producto-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 8px 24px rgba(211, 47, 47, 0.2) !important;
        }

    .carrito-btn {
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.05);
        }
    }
</style>

@code {
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private List<ProductoDTO> productos = new();
    private List<ProductoDTO> productosFiltrados = new();
    private List<ItemCarrito> productosEnCarrito = new();
    private bool isLoading = false;
    private bool isConfirmando = false;
    private string searchTerm = string.Empty;
    private bool showCarrito = false;
    private string observaciones = string.Empty;
    private bool mostrarToast = false;
    private string mensajeToast = string.Empty;
    private bool toastExito = true;
    private string? errorMessage = null;
    private int clienteIdActual = 1; // TODO: Obtener del usuario logueado

    private class ItemCarrito
    {
        public ProductoDTO Producto { get; set; } = default!;
        public int Cantidad { get; set; } = 1;
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            productos = (await ProductoApi.GetAllAsync()).ToList();
            productosFiltrados = productos;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            productos = new List<ProductoDTO>();
            productosFiltrados = new List<ProductoDTO>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FiltrarProductos()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            productosFiltrados = productos;
        }
        else
        {
            var search = searchTerm.ToLower();
            productosFiltrados = productos
                .Where(p => p.Nombre.ToLower().Contains(search) || p.Descripcion.ToLower().Contains(search))
                .ToList();
        }
    }

    private void AgregarAlCarrito(ProductoDTO producto)
    {
        var itemExistente = productosEnCarrito.FirstOrDefault(c => c.Producto.Id == producto.Id);

        if (itemExistente != null)
        {
            itemExistente.Cantidad++;
            MostrarToast($"✓ Cantidad de {producto.Nombre} actualizada", true);
        }
        else
        {
            productosEnCarrito.Add(new ItemCarrito
                {
                    Producto = producto,
                    Cantidad = 1
                });
            MostrarToast($"✓ {producto.Nombre} agregado al pedido", true);
        }

        StateHasChanged();
    }

    private void AumentarCantidad(ItemCarrito item)
    {
        item.Cantidad++;
    }

    private void DisminuirCantidad(ItemCarrito item)
    {
        if (item.Cantidad > 1)
        {
            item.Cantidad--;
        }
        else
        {
            EliminarDelCarrito(item);
        }
    }

    private void EliminarDelCarrito(ItemCarrito item)
    {
        productosEnCarrito.Remove(item);
        if (productosEnCarrito.Count == 0)
        {
            CerrarCarrito();
        }
    }

    private void VaciarCarrito()
    {
        productosEnCarrito.Clear();
        observaciones = string.Empty;
        CerrarCarrito();
        MostrarToast("Carrito vaciado", true);
    }

    private float CalcularSubtotal()
    {
        return productosEnCarrito.Sum(c => c.Cantidad * c.Producto.Precio);
    }

    private void AbrirCarrito()
    {
        showCarrito = true;
    }

    private void CerrarCarrito()
    {
        showCarrito = false;
    }

    private async Task ConfirmarPedido()
    {
        isConfirmando = true;

        try
        {
            var nuevoPedido = new PedidoDTO
                {
                    Descripcion = observaciones,
                    Estado = "Pendiente",
                    FechaHoraInicio = DateTime.Now,
                    Subtotal = CalcularSubtotal(),
                    ClienteId = clienteIdActual,
                    Productos = productosEnCarrito.Select(c => c.Producto).ToList()
                };

            await PedidoApi.AddAsync(nuevoPedido);

            MostrarToast("¡Pedido realizado exitosamente! 🎉", true);

            // Limpiar carrito
            productosEnCarrito.Clear();
            observaciones = string.Empty;
            CerrarCarrito();

            // Esperar un momento para que vea el toast
            await Task.Delay(2000);

            // Redirigir a la sección de pedidos
            Navigation.NavigateTo("/dashboard/cliente/pedidos");
        }
        catch (Exception ex)
        {
            MostrarToast($"Error al confirmar pedido: {ex.Message}", false);
        }
        finally
        {
            isConfirmando = false;
            StateHasChanged();
        }
    }

    private void MostrarToast(string mensaje, bool exito)
    {
        mensajeToast = mensaje;
        toastExito = exito;
        mostrarToast = true;
        StateHasChanged();

        Task.Delay(3000).ContinueWith(_ =>
        {
            mostrarToast = false;
            InvokeAsync(StateHasChanged);
        });
    }
}