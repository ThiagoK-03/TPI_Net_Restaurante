@page "/dashboard/cliente/pedidos"
@layout ClienteDashboardLayout
@using API
@using DTOs

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-danger fw-bold">Mis Pedidos</h2>
        <button class="btn btn-primary btn-lg" @onclick="AbrirModalNuevoPedido">
            <i class="bi bi-plus-circle"></i> Hacer Nuevo Pedido
        </button>
    </div>

    <div class="btn-group mb-4 d-flex flex-wrap" role="group">
        <button type="button"
        class="btn @(estadoFiltro == null ? "btn-danger" : "btn-outline-danger")"
        @onclick="MostrarTodos">
            Todos (@pedidos.Count)
        </button>
        @foreach (var estado in Enum.GetValues<EstadoPedido>())
        {
            <button type="button"
            class="btn @(estadoFiltro == estado ? "btn-danger" : "btn-outline-danger")"
            @onclick="@(() => FiltrarPorEstado(estado))">
                @ObtenerTextoEstado(estado) (@pedidos.Count(p => p.Estado == estado.ToString()))
            </button>
        }
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-danger" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando tus pedidos...</p>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            Error al cargar pedidos: @errorMessage
            <button class="btn btn-sm btn-outline-danger ms-3" @onclick="CargarPedidos">
                <i class="bi bi-arrow-clockwise"></i> Reintentar
            </button>
        </div>
    }
    else if (pedidosFiltrados == null || pedidosFiltrados.Count == 0)
    {
        <div class="card text-center py-5">
            <div class="card-body">
                <h1 class="display-1">📦</h1>
                <h3 class="text-muted">No tienes pedidos @(estadoFiltro != null ? "en este estado" : "")</h3>
                <p class="text-secondary mb-4">¡Empieza a ordenar ahora!</p>
                <button class="btn btn-primary btn-lg" @onclick="AbrirModalNuevoPedido">
                    <i class="bi bi-cart-plus"></i> Hacer Mi Primer Pedido
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var pedido in pedidosFiltrados)
            {
                <div class="col-12 col-lg-6">
                    <div class="card h-100 shadow-sm border-0" style="border-left: 5px solid @ObtenerColorEstado(pedido.Estado) !important;">
                        <div class="card-header d-flex justify-content-between align-items-center" style="background-color: var(--rojo-muy-claro);">
                            <div class="d-flex align-items-center gap-2">
                                <span class="fs-3">📋</span>
                                <div>
                                    <h5 class="mb-0 text-danger fw-bold">Pedido #@pedido.Id</h5>
                                    <small class="text-muted">@pedido.FechaHoraInicio.ToString("dd/MM/yyyy HH:mm")</small>
                                </div>
                            </div>
                            <span class="badge @ObtenerClaseEstado(pedido.Estado) fs-6">
                                @ObtenerTextoEstado(Enum.Parse<EstadoPedido>(pedido.Estado))
                            </span>
                        </div>

                        <div class="card-body">
                            @if (!string.IsNullOrEmpty(pedido.Descripcion))
                            {
                                <div class="alert alert-light border mb-3">
                                    <small class="text-muted d-block mb-1">💬 Observaciones:</small>
                                    <small>@pedido.Descripcion</small>
                                </div>
                            }

                            @if (pedido.Productos != null && pedido.Productos.Any())
                            {
                                <div class="mb-3">
                                    <small class="text-muted d-block mb-2 fw-semibold">📝 Items:</small>
                                    <ul class="list-unstyled ms-2">
                                        @foreach (var prod in pedido.Productos)
                                        {
                                            <li class="mb-1">
                                                <span class="badge bg-secondary">ID: @prod.Id</span>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }

                            @if (pedido.FechaHoraFinEstimada != null)
                            {
                                <div class="alert @(pedido.Estado == "Pendiente" || pedido.Estado == "EnPreparacion" ? "alert-warning" : "alert-info") mb-0">
                                    <i class="bi bi-clock"></i>
                                    <small><strong>Estimado:</strong> @pedido.FechaHoraFinEstimada?.ToString("dd/MM/yyyy HH:mm")</small>
                                </div>
                            }

                            @if (pedido.Estado == "EnPreparacion")
                            {
                                <div class="alert alert-primary mb-0 mt-2">
                                    <i class="bi bi-hourglass-split"></i>
                                    <small>Tu pedido está siendo preparado...</small>
                                </div>
                            }
                            else if (pedido.Estado == "Completado")
                            {
                                <div class="alert alert-success mb-0 mt-2">
                                    <i class="bi bi-check-circle-fill"></i>
                                    <small>¡Pedido completado! Disfruta tu comida 😊</small>
                                </div>
                            }
                        </div>

                        <div class="card-footer bg-light">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <span class="text-muted">Total:</span>
                                <strong class="h4 mb-0 text-danger">$@pedido.Subtotal.ToString("F2")</strong>
                            </div>

                            <div class="d-flex gap-2">
                                <button class="btn btn-outline-primary flex-fill" @onclick="@(() => VerDetalles(pedido))">
                                    <i class="bi bi-eye"></i> Ver Detalles
                                </button>
                                @if (pedido.Estado == "Pendiente")
                                {
                                    <button class="btn btn-outline-secondary flex-fill" @onclick="@(() => AbrirModalEditar(pedido))">
                                        <i class="bi bi-pencil"></i> Editar
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @* Modal Ver Detalles *@
    @if (showDetailsModal && pedidoSeleccionado != null)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" @onclick="CerrarDetalles">
            <div class="modal-dialog modal-dialog-centered modal-lg" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header" style="background-color: var(--rojo-muy-claro);">
                        <h5 class="modal-title text-danger fw-bold">Detalles del Pedido #@pedidoSeleccionado.Id</h5>
                        <button type="button" class="btn-close" @onclick="CerrarDetalles"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h6 class="text-danger fw-bold mb-3">Información del Pedido</h6>
                                <p class="mb-2"><strong>Estado:</strong> <span class="badge @ObtenerClaseEstado(pedidoSeleccionado.Estado)">@ObtenerTextoEstado(Enum.Parse<EstadoPedido>(pedidoSeleccionado.Estado))</span></p>
                                <p class="mb-2"><strong>Fecha de Pedido:</strong> @pedidoSeleccionado.FechaHoraInicio.ToString("dd/MM/yyyy HH:mm")</p>
                                @if (pedidoSeleccionado.FechaHoraFinEstimada != null)
                                {
                                    <p class="mb-2"><strong>Entrega Estimada:</strong> @pedidoSeleccionado.FechaHoraFinEstimada?.ToString("dd/MM/yyyy HH:mm")</p>
                                }
                                @if (pedidoSeleccionado.FechaHoraFin != null)
                                {
                                    <p class="mb-2"><strong>Completado:</strong> @pedidoSeleccionado.FechaHoraFin?.ToString("dd/MM/yyyy HH:mm")</p>
                                }
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(pedidoSeleccionado.Descripcion))
                        {
                            <div class="mb-4">
                                <h6 class="text-danger fw-bold mb-3">Observaciones</h6>
                                <div class="alert alert-light border">
                                    <p class="mb-0">@pedidoSeleccionado.Descripcion</p>
                                </div>
                            </div>
                        }

                        @if (pedidoSeleccionado.Productos != null && pedidoSeleccionado.Productos.Any())
                        {
                            <div class="mb-4">
                                <h6 class="text-danger fw-bold mb-3">Productos del Pedido</h6>
                                <div class="list-group">
                                    @foreach (var prod in pedidoSeleccionado.Productos)
                                    {
                                        <div class="list-group-item">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <span>Producto ID: @prod.Id</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <div class="text-end pt-3 border-top">
                            <h3 class="text-danger mb-0">Total: $@pedidoSeleccionado.Subtotal.ToString("F2")</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @* Modal Nuevo Pedido / Editar *@
    @if (showPedidoModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-dialog-centered modal-xl modal-dialog-scrollable">
                <div class="modal-content" style="max-height: 90vh;">
                    <div class="modal-header" style="background-color: var(--rojo-muy-claro);">
                        <h5 class="modal-title text-danger fw-bold">
                            @(isEditMode ? $"Editar Pedido #{pedidoActual.Id}" : "Nuevo Pedido")
                        </h5>
                        <button type="button" class="btn-close" @onclick="CerrarModalPedido"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <!-- Columna Izquierda: Productos Disponibles -->
                            <div class="col-lg-7 border-end">
                                <h6 class="text-danger fw-bold mb-3">Selecciona tus Productos</h6>

                                <div class="input-group mb-3">
                                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                                    <input type="text" class="form-control" placeholder="Buscar productos..."
                                    @bind="searchProducto" @bind:event="oninput" @onkeyup="FiltrarProductos" />
                                </div>

                                @if (loadingProductos)
                                {
                                    <div class="text-center py-4">
                                        <div class="spinner-border text-danger"></div>
                                        <p class="text-muted mt-2">Cargando productos...</p>
                                    </div>
                                }
                                else if (productosFiltrados.Count == 0)
                                {
                                    <div class="alert alert-warning">No se encontraron productos</div>
                                }
                                else
                                {
                                    <div class="row g-3" style="max-height: 500px; overflow-y: auto;">
                                        @foreach (var producto in productosFiltrados)
                                        {
                                            <div class="col-12">
                                                <div class="card shadow-sm h-100">
                                                    <div class="card-body p-3">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <div class="flex-grow-1">
                                                                <h6 class="mb-1 fw-bold text-danger">@producto.Nombre</h6>
                                                                <p class="text-muted small mb-2">@producto.Descripcion</p>
                                                                <span class="h5 text-danger mb-0">$@producto.Precio.ToString("F2")</span>
                                                            </div>
                                                            <button class="btn btn-primary" @onclick="@(() => AgregarProductoAlPedido(producto))">
                                                                <i class="bi bi-plus-circle"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                            <!-- Columna Derecha: Carrito del Pedido -->
                            <div class="col-lg-5">
                                <h6 class="text-danger fw-bold mb-3">Tu Pedido</h6>

                                @if (productosEnPedido.Count == 0)
                                {
                                    <div class="alert alert-info">
                                        <i class="bi bi-info-circle"></i> Agrega productos a tu pedido
                                    </div>
                                }
                                else
                                {
                                    <div class="list-group mb-3" style="max-height: 300px; overflow-y: auto;">
                                        @foreach (var item in productosEnPedido)
                                        {
                                            <div class="list-group-item">
                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                    <strong class="text-danger">@item.Producto.Nombre</strong>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="@(() => QuitarProductoDelPedido(item))">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <small class="text-muted">$@item.Producto.Precio.ToString("F2")</small>
                                                </div>
                                            </div>
                                        }
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label fw-semibold">Observaciones / Notas Especiales</label>
                                        <textarea class="form-control" rows="3" @bind="pedidoActual.Descripcion"
                                        placeholder="Ej: Sin cebolla, bien cocido, etc."></textarea>
                                    </div>

                                    <div class="alert alert-light border">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="fw-bold">Subtotal:</span>
                                            <span class="h4 text-danger mb-0">$@CalcularSubtotal().ToString("F2")</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalPedido" disabled="@isSaving">
                            Cancelar
                        </button>
                        <button type="button" class="btn btn-primary btn-lg" @onclick="ConfirmarPedido"
                        disabled="@(isSaving || productosEnPedido.Count == 0)">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="bi bi-check-circle"></i> @(isEditMode ? "Actualizar Pedido" : "Confirmar Pedido")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    @* Toast *@
    @if (mostrarToast)
    {
        <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
            <div class="toast show" role="alert">
                <div class="toast-header @(toastExito ? "bg-success" : "bg-danger") text-white">
                    <i class="bi @(toastExito ? "bi-check-circle-fill" : "bi-x-circle-fill") me-2"></i>
                    <strong class="me-auto">@(toastExito ? "¡Éxito!" : "Error")</strong>
                    <button type="button" class="btn-close btn-close-white" @onclick="@(() => mostrarToast = false)"></button>
                </div>
                <div class="toast-body">@mensajeToast</div>
            </div>
        </div>
    }
</div>

@code {
    private List<PedidoDTO> pedidos = new();
    private List<PedidoDTO> pedidosFiltrados = new();
    private List<ProductoDTO> productosDisponibles = new();
    private List<ProductoDTO> productosFiltrados = new();
    private List<ProductoPedidoItem> productosEnPedido = new();

    private bool isLoading = false;
    private bool loadingProductos = false;
    private bool isSaving = false;
    private bool showDetailsModal = false;
    private bool showPedidoModal = false;
    private bool isEditMode = false;
    private PedidoDTO pedidoActual = new();
    private PedidoDTO? pedidoSeleccionado = null;
    private bool mostrarToast = false;
    private string mensajeToast = string.Empty;
    private bool toastExito = true;
    private string? errorMessage = null;
    private EstadoPedido? estadoFiltro = null;
    private string searchProducto = string.Empty;
    private int clienteIdActual = 1; // TODO: Obtener del usuario logueado

    public enum EstadoPedido
    {
        Pendiente,
        EnPreparacion,
        Completado,
        Cancelado
    }

    private class ProductoPedidoItem
    {
        public ProductoDTO Producto { get; set; } = default!;
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarPedidos();
        await CargarProductos();
    }

    private async Task CargarPedidos()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var todosPedidos = await PedidoApi.GetAllAsync();
            // Filtrar solo los pedidos del cliente actual
            pedidos = todosPedidos.Where(p => p.ClienteId == clienteIdActual).ToList();
            pedidosFiltrados = pedidos;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            pedidos = new List<PedidoDTO>();
            pedidosFiltrados = new List<PedidoDTO>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CargarProductos()
    {
        loadingProductos = true;
        try
        {
            productosDisponibles = (await ProductoApi.GetAllAsync()).ToList();
            productosFiltrados = productosDisponibles;
        }
        catch (Exception ex)
        {
            MostrarToast($"Error al cargar productos: {ex.Message}", false);
        }
        finally
        {
            loadingProductos = false;
            StateHasChanged();
        }
    }

    private void FiltrarProductos()
    {
        if (string.IsNullOrWhiteSpace(searchProducto))
        {
            productosFiltrados = productosDisponibles;
        }
        else
        {
            var search = searchProducto.ToLower();
            productosFiltrados = productosDisponibles
                .Where(p => p.Nombre.ToLower().Contains(search) || p.Descripcion.ToLower().Contains(search))
                .ToList();
        }
    }

    private void FiltrarPorEstado(EstadoPedido estado)
    {
        estadoFiltro = estado;
        pedidosFiltrados = pedidos.Where(p => p.Estado == estado.ToString()).ToList();
    }

    private void MostrarTodos()
    {
        estadoFiltro = null;
        pedidosFiltrados = pedidos;
    }

    private void VerDetalles(PedidoDTO pedido)
    {
        pedidoSeleccionado = pedido;
        showDetailsModal = true;
    }

    private void CerrarDetalles()
    {
        showDetailsModal = false;
        pedidoSeleccionado = null;
    }

    private void AbrirModalNuevoPedido()
    {
        isEditMode = false;
        pedidoActual = new PedidoDTO
            {
                FechaHoraInicio = DateTime.Now,
                Estado = EstadoPedido.Pendiente.ToString(),
                ClienteId = clienteIdActual,
                Descripcion = "",
                Productos = new List<ProductoDTO>()
            };
        productosEnPedido = new List<ProductoPedidoItem>();
        searchProducto = string.Empty;
        productosFiltrados = productosDisponibles;
        showPedidoModal = true;
    }

    private void AbrirModalEditar(PedidoDTO pedido)
    {
        isEditMode = true;
        pedidoActual = new PedidoDTO
            {
                Id = pedido.Id,
                Descripcion = pedido.Descripcion,
                Estado = pedido.Estado,
                FechaHoraInicio = pedido.FechaHoraInicio,
                FechaHoraFin = pedido.FechaHoraFin,
                FechaHoraFinEstimada = pedido.FechaHoraFinEstimada,
                Subtotal = pedido.Subtotal,
                ClienteId = pedido.ClienteId,
                EmpleadoId = pedido.EmpleadoId,
                Productos = pedido.Productos ?? new List<ProductoDTO>()
            };

        productosEnPedido = pedido.Productos?.Select(p => new ProductoPedidoItem { Producto = p }).ToList() ?? new List<ProductoPedidoItem>();
        searchProducto = string.Empty;
        productosFiltrados = productosDisponibles;
        showPedidoModal = true;
    }

    private void CerrarModalPedido()
    {
        showPedidoModal = false;
        pedidoActual = new();
        productosEnPedido = new List<ProductoPedidoItem>();
    }

    private void AgregarProductoAlPedido(ProductoDTO producto)
    {
        productosEnPedido.Add(new ProductoPedidoItem { Producto = producto });
        MostrarToast($"✓ {producto.Nombre} agregado al pedido", true);
    }

    private void QuitarProductoDelPedido(ProductoPedidoItem item)
    {
        productosEnPedido.Remove(item);
    }

    private float CalcularSubtotal()
    {
        return productosEnPedido.Sum(p => p.Producto.Precio);
    }

    private async Task ConfirmarPedido()
    {
        isSaving = true;

        try
        {
            pedidoActual.Subtotal = CalcularSubtotal();
            pedidoActual.Productos = productosEnPedido.Select(p => p.Producto).ToList();
            pedidoActual.ClienteId = clienteIdActual;

            if (isEditMode)
            {
                await PedidoApi.UpdateAsync(pedidoActual);
                MostrarToast("¡Pedido actualizado exitosamente!", true);
            }
            else
            {
                pedidoActual.FechaHoraInicio = DateTime.Now;
                pedidoActual.Estado = EstadoPedido.Pendiente.ToString();

                try{
                    await PedidoApi.AddAsync(pedidoActual);
                    MostrarToast("¡Pedido realizado exitosamente! Pronto estará listo.", true);
                }
                catch
                {
                    MostrarToast("Error somewhere", false);
                }
            }

            CerrarModalPedido();
            await CargarPedidos();
        }
        catch (Exception ex)
        {
            MostrarToast($"Error al confirmar pedido: {ex.Message}", false);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void MostrarToast(string mensaje, bool exito)
    {
        mensajeToast = mensaje;
        toastExito = exito;
        mostrarToast = true;
        StateHasChanged();

        Task.Delay(3000).ContinueWith(_ =>
        {
            mostrarToast = false;
            InvokeAsync(StateHasChanged);
        });
    }

    private string ObtenerTextoEstado(EstadoPedido estado)
    {
        return estado switch
        {
            EstadoPedido.Pendiente => "Pendiente",
            EstadoPedido.EnPreparacion => "En Preparación",
            EstadoPedido.Completado => "Completado",
            EstadoPedido.Cancelado => "Cancelado",
            _ => "Desconocido"
        };
    }

    private string ObtenerClaseEstado(string estado)
    {
        return estado switch
        {
            "Pendiente" => "bg-warning text-dark",
            "EnPreparacion" => "bg-primary",
            "Completado" => "bg-success",
            "Cancelado" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string ObtenerColorEstado(string estado)
    {
        return estado switch
        {
            "Pendiente" => "#ff9800",
            "EnPreparacion" => "#2196f3",
            "Completado" => "#4caf50",
            "Cancelado" => "#f44336",
            _ => "#9e9e9e"
        };
    }
}