@page "/login"

<link href="/LoginPage.css" rel="stylesheet" />

<div class="login-page">
    <div class="login-container">
        <div class="login-card">
            <div class="login-header">
                <h1>Bienvenido de vuelta</h1>
                <p>Ingresa tus credenciales para continuar</p>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-error">
                    <span class="alert-icon">⚠️</span>
                    <span>@errorMessage</span>
                </div>
            }

            <form class="login-form" @onsubmit="HandleLogin">
                <div class="form-group">
                    <label for="email">Correo Electrónico</label>
                    <input type="email"
                    id="email"
                    class="form-control"
                    placeholder="tu@email.com"
                    @bind="loginModel.Email"
                    required />
                </div>

                <div class="form-group">
                    <label for="password">Contraseña</label>
                    <input type="password"
                    id="password"
                    class="form-control"
                    placeholder="••••••••"
                    @bind="loginModel.Password"
                    required />
                </div>

                <div class="form-options">
                    <label class="checkbox-label">
                        <input type="checkbox" @bind="rememberMe" />
                        <span>Recordarme</span>
                    </label>
                    <a href="/forgot-password" class="link-primary">¿Olvidaste tu contraseña?</a>
                </div>

                <button type="submit" class="btn-primary btn-full" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner"></span>
                        <span>Iniciando sesión...</span>
                    }
                    else
                    {
                        <span>Iniciar Sesión</span>
                    }
                </button>
            </form>

            <div class="login-footer">
                <p>¿No tienes cuenta? <a href="/register" class="link-primary">Regístrate aquí</a></p>
            </div>

        </div>

        <button class="btn-back" @onclick="GoBack">
            ← Volver al inicio
        </button>
    </div>
</div>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    // En un proyecto real, inyectarías tu servicio de autenticación aquí
    // [Inject]
    // private IAuthService AuthService { get; set; } = default!;

    private LoginModel loginModel = new();
    private bool rememberMe = false;
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Simulación de llamada al backend
            await Task.Delay(1500);

            // Aquí harías la llamada real a tu API
            // var response = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);

            // Simulación de validación
            if (loginModel.Email == "admin@restaurant.com" && loginModel.Password == "admin123")
            {
                // Redirigir según el rol
                Console.WriteLine("Entramos");
                NavigationManager.NavigateTo("/dashboard/admin");
            }
            else if (loginModel.Email == "empleado@restaurant.com" && loginModel.Password == "emp123")
            {
                NavigationManager.NavigateTo("/dashboard/empleado");
            }
            else if (loginModel.Email == "cliente@restaurant.com" && loginModel.Password == "cli123")
            {
                NavigationManager.NavigateTo("/dashboard/cliente");
            }
            else
            {
                errorMessage = "Credenciales incorrectas. Por favor, verifica tu email y contraseña.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error al iniciar sesión. Por favor, intenta nuevamente.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void LoginWithGoogle()
    {
        // Implementar login con Google
        errorMessage = "Login con Google próximamente disponible";
    }

    private void LoginWithFacebook()
    {
        // Implementar login con Facebook
        errorMessage = "Login con Facebook próximamente disponible";
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}